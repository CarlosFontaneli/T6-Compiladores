# Generated from Receita.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,174,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,8,1,9,4,9,111,8,9,11,9,12,9,112,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,157,
        8,10,1,11,1,11,5,11,161,8,11,10,11,12,11,164,9,11,1,12,1,12,1,13,
        1,13,1,14,4,14,171,8,14,11,14,12,14,172,0,0,15,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,1,0,4,
        1,0,48,57,1,0,65,90,1,0,97,122,1,0,10,10,181,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,0,3,38,1,0,0,
        0,5,47,1,0,0,0,7,55,1,0,0,0,9,64,1,0,0,0,11,75,1,0,0,0,13,86,1,0,
        0,0,15,91,1,0,0,0,17,97,1,0,0,0,19,110,1,0,0,0,21,156,1,0,0,0,23,
        158,1,0,0,0,25,165,1,0,0,0,27,167,1,0,0,0,29,170,1,0,0,0,31,32,5,
        68,0,0,32,33,5,105,0,0,33,34,5,117,0,0,34,35,5,114,0,0,35,36,5,110,
        0,0,36,37,5,111,0,0,37,2,1,0,0,0,38,39,5,77,0,0,39,40,5,97,0,0,40,
        41,5,116,0,0,41,42,5,117,0,0,42,43,5,116,0,0,43,44,5,105,0,0,44,
        45,5,110,0,0,45,46,5,111,0,0,46,4,1,0,0,0,47,48,5,78,0,0,48,49,5,
        111,0,0,49,50,5,116,0,0,50,51,5,117,0,0,51,52,5,114,0,0,52,53,5,
        110,0,0,53,54,5,111,0,0,54,6,1,0,0,0,55,56,5,68,0,0,56,57,5,111,
        0,0,57,58,5,115,0,0,58,59,5,97,0,0,59,60,5,103,0,0,60,61,5,101,0,
        0,61,62,5,109,0,0,62,63,5,58,0,0,63,8,1,0,0,0,64,65,5,73,0,0,65,
        66,5,110,0,0,66,67,5,100,0,0,67,68,5,105,0,0,68,69,5,99,0,0,69,70,
        5,97,0,0,70,71,5,231,0,0,71,72,5,227,0,0,72,73,5,111,0,0,73,74,5,
        58,0,0,74,10,1,0,0,0,75,76,5,65,0,0,76,77,5,112,0,0,77,78,5,108,
        0,0,78,79,5,105,0,0,79,80,5,99,0,0,80,81,5,97,0,0,81,82,5,231,0,
        0,82,83,5,227,0,0,83,84,5,111,0,0,84,85,5,58,0,0,85,12,1,0,0,0,86,
        87,5,79,0,0,87,88,5,114,0,0,88,89,5,97,0,0,89,90,5,108,0,0,90,14,
        1,0,0,0,91,92,5,82,0,0,92,93,5,101,0,0,93,94,5,116,0,0,94,95,5,97,
        0,0,95,96,5,108,0,0,96,16,1,0,0,0,97,98,5,73,0,0,98,99,5,110,0,0,
        99,100,5,116,0,0,100,101,5,114,0,0,101,102,5,97,0,0,102,103,5,118,
        0,0,103,104,5,101,0,0,104,105,5,110,0,0,105,106,5,111,0,0,106,107,
        5,115,0,0,107,108,5,97,0,0,108,18,1,0,0,0,109,111,7,0,0,0,110,109,
        1,0,0,0,111,112,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,20,1,
        0,0,0,114,115,5,67,0,0,115,116,5,111,0,0,116,117,5,109,0,0,117,118,
        5,112,0,0,118,119,5,114,0,0,119,120,5,105,0,0,120,121,5,109,0,0,
        121,122,5,105,0,0,122,123,5,100,0,0,123,124,5,111,0,0,124,157,5,
        115,0,0,125,126,5,77,0,0,126,127,5,105,0,0,127,128,5,108,0,0,128,
        129,5,105,0,0,129,130,5,108,0,0,130,131,5,105,0,0,131,132,5,116,
        0,0,132,133,5,114,0,0,133,134,5,111,0,0,134,157,5,115,0,0,135,136,
        5,77,0,0,136,137,5,105,0,0,137,138,5,108,0,0,138,139,5,105,0,0,139,
        140,5,103,0,0,140,141,5,114,0,0,141,142,5,97,0,0,142,143,5,109,0,
        0,143,144,5,97,0,0,144,157,5,115,0,0,145,146,5,99,0,0,146,147,5,
        111,0,0,147,148,5,109,0,0,148,149,5,112,0,0,149,157,5,46,0,0,150,
        151,5,109,0,0,151,152,5,108,0,0,152,157,5,46,0,0,153,154,5,109,0,
        0,154,155,5,103,0,0,155,157,5,46,0,0,156,114,1,0,0,0,156,125,1,0,
        0,0,156,135,1,0,0,0,156,145,1,0,0,0,156,150,1,0,0,0,156,153,1,0,
        0,0,157,22,1,0,0,0,158,162,7,1,0,0,159,161,7,2,0,0,160,159,1,0,0,
        0,161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,24,1,0,0,0,
        164,162,1,0,0,0,165,166,5,10,0,0,166,26,1,0,0,0,167,168,5,32,0,0,
        168,28,1,0,0,0,169,171,8,3,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,
        170,1,0,0,0,172,173,1,0,0,0,173,30,1,0,0,0,5,0,112,156,162,172,0
    ]

class ReceitaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    NUMERO = 10
    UNIDADE = 11
    REMEDIO = 12
    LINE_BREAK = 13
    WS = 14
    TEXTO = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Diurno'", "'Matutino'", "'Noturno'", "'Dosagem:'", "'Indica\\u00E7\\u00E3o:'", 
            "'Aplica\\u00E7\\u00E3o:'", "'Oral'", "'Retal'", "'Intravenosa'", 
            "'\\n'", "' '" ]

    symbolicNames = [ "<INVALID>",
            "NUMERO", "UNIDADE", "REMEDIO", "LINE_BREAK", "WS", "TEXTO" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "NUMERO", "UNIDADE", "REMEDIO", "LINE_BREAK", 
                  "WS", "TEXTO" ]

    grammarFileName = "Receita.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


