# Generated from Receita.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,169,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,5,15,157,8,
        15,10,15,12,15,160,9,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,1,0,4,1,0,48,57,
        1,0,65,90,1,0,97,122,8,0,33,33,35,37,42,43,58,58,60,63,91,91,93,
        93,123,125,169,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
        9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,
        29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
        39,1,0,0,0,1,41,1,0,0,0,3,48,1,0,0,0,5,57,1,0,0,0,7,65,1,0,0,0,9,
        67,1,0,0,0,11,79,1,0,0,0,13,90,1,0,0,0,15,101,1,0,0,0,17,107,1,0,
        0,0,19,111,1,0,0,0,21,115,1,0,0,0,23,126,1,0,0,0,25,131,1,0,0,0,
        27,137,1,0,0,0,29,149,1,0,0,0,31,154,1,0,0,0,33,161,1,0,0,0,35,163,
        1,0,0,0,37,165,1,0,0,0,39,167,1,0,0,0,41,42,5,68,0,0,42,43,5,105,
        0,0,43,44,5,117,0,0,44,45,5,114,0,0,45,46,5,110,0,0,46,47,5,111,
        0,0,47,2,1,0,0,0,48,49,5,77,0,0,49,50,5,97,0,0,50,51,5,116,0,0,51,
        52,5,117,0,0,52,53,5,116,0,0,53,54,5,105,0,0,54,55,5,110,0,0,55,
        56,5,111,0,0,56,4,1,0,0,0,57,58,5,78,0,0,58,59,5,111,0,0,59,60,5,
        116,0,0,60,61,5,117,0,0,61,62,5,114,0,0,62,63,5,110,0,0,63,64,5,
        111,0,0,64,6,1,0,0,0,65,66,5,47,0,0,66,8,1,0,0,0,67,68,5,67,0,0,
        68,69,5,111,0,0,69,70,5,109,0,0,70,71,5,112,0,0,71,72,5,114,0,0,
        72,73,5,105,0,0,73,74,5,109,0,0,74,75,5,105,0,0,75,76,5,100,0,0,
        76,77,5,111,0,0,77,78,5,115,0,0,78,10,1,0,0,0,79,80,5,77,0,0,80,
        81,5,105,0,0,81,82,5,108,0,0,82,83,5,105,0,0,83,84,5,108,0,0,84,
        85,5,105,0,0,85,86,5,116,0,0,86,87,5,114,0,0,87,88,5,111,0,0,88,
        89,5,115,0,0,89,12,1,0,0,0,90,91,5,77,0,0,91,92,5,105,0,0,92,93,
        5,108,0,0,93,94,5,105,0,0,94,95,5,103,0,0,95,96,5,114,0,0,96,97,
        5,97,0,0,97,98,5,109,0,0,98,99,5,97,0,0,99,100,5,115,0,0,100,14,
        1,0,0,0,101,102,5,99,0,0,102,103,5,111,0,0,103,104,5,109,0,0,104,
        105,5,112,0,0,105,106,5,46,0,0,106,16,1,0,0,0,107,108,5,109,0,0,
        108,109,5,108,0,0,109,110,5,46,0,0,110,18,1,0,0,0,111,112,5,109,
        0,0,112,113,5,103,0,0,113,114,5,46,0,0,114,20,1,0,0,0,115,116,5,
        73,0,0,116,117,5,110,0,0,117,118,5,100,0,0,118,119,5,105,0,0,119,
        120,5,99,0,0,120,121,5,97,0,0,121,122,5,231,0,0,122,123,5,227,0,
        0,123,124,5,111,0,0,124,125,5,58,0,0,125,22,1,0,0,0,126,127,5,79,
        0,0,127,128,5,114,0,0,128,129,5,97,0,0,129,130,5,108,0,0,130,24,
        1,0,0,0,131,132,5,82,0,0,132,133,5,101,0,0,133,134,5,116,0,0,134,
        135,5,97,0,0,135,136,5,108,0,0,136,26,1,0,0,0,137,138,5,73,0,0,138,
        139,5,110,0,0,139,140,5,116,0,0,140,141,5,114,0,0,141,142,5,97,0,
        0,142,143,5,118,0,0,143,144,5,101,0,0,144,145,5,110,0,0,145,146,
        5,111,0,0,146,147,5,115,0,0,147,148,5,97,0,0,148,28,1,0,0,0,149,
        150,5,40,0,0,150,151,7,0,0,0,151,152,7,0,0,0,152,153,5,41,0,0,153,
        30,1,0,0,0,154,158,7,1,0,0,155,157,7,2,0,0,156,155,1,0,0,0,157,160,
        1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,32,1,0,0,0,160,158,1,
        0,0,0,161,162,9,0,0,0,162,34,1,0,0,0,163,164,7,3,0,0,164,36,1,0,
        0,0,165,166,5,10,0,0,166,38,1,0,0,0,167,168,5,32,0,0,168,40,1,0,
        0,0,2,0,158,0
    ]

class ReceitaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    QUANTIDADE = 15
    REMEDIO = 16
    TEXTO = 17
    SIMBOLO_INVALIDO = 18
    LINE_BREAK = 19
    WS = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Diurno'", "'Matutino'", "'Noturno'", "'/'", "'Comprimidos'", 
            "'Mililitros'", "'Miligramas'", "'comp.'", "'ml.'", "'mg.'", 
            "'Indica\\u00E7\\u00E3o:'", "'Oral'", "'Retal'", "'Intravenosa'", 
            "'\\n'", "' '" ]

    symbolicNames = [ "<INVALID>",
            "QUANTIDADE", "REMEDIO", "TEXTO", "SIMBOLO_INVALIDO", "LINE_BREAK", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "QUANTIDADE", "REMEDIO", "TEXTO", "SIMBOLO_INVALIDO", 
                  "LINE_BREAK", "WS" ]

    grammarFileName = "Receita.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


